<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:include schemaLocation="../../CommonSchemas/WorkflowsCommon.xsd" />

  <xs:complexType name="InputDefinition0">
    <xs:complexContent>
      <xs:extension base="InputContainer">
        <xs:sequence>
          <xs:element type="InFileList0" name="files" />
              <xs:any minOccurs="0" processContents="skip" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InputType">
    <xs:all>
      <xs:element name="input0" type="InputDefinition0" minOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="InputLabel">
    <xs:all>
      <xs:element name="input0" type="xs:string" default="student-step" minOccurs="0" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="InFileList0">
    <xs:choice>
      <xs:element ref="file"  minOccurs="0" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="OutputDefinition0">
    <xs:complexContent>
      <xs:extension base="InputContainer">
        <xs:sequence>
          <xs:element type="OutFileList0" name="files" />
          <xs:any minOccurs="0" processContents="skip" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OutFileList0">
    <xs:choice>
      <xs:element ref="student-step" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="OutputDefinition1">
    <xs:complexContent>
      <xs:extension base="InputContainer">
        <xs:sequence>
          <xs:element type="OutFileList1" name="files" />
          <xs:any minOccurs="0" processContents="skip" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OutFileList1">
    <xs:choice>
      <xs:element ref="model-values" />
    </xs:choice>
  </xs:complexType>

  <!-- Yudelson: BKT parameters VVV -->
  <xs:complexType name="OutputDefinition2">
    <xs:complexContent>
      <xs:extension base="InputContainer">
        <xs:sequence>
          <xs:element type="OutFileList2" name="files" />
          <xs:any minOccurs="0" processContents="skip" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OutFileList2">
    <xs:choice>
      <xs:element ref="parameters" />
    </xs:choice>
  </xs:complexType>

  <!-- Yudelson: BKT parameters ^^^ -->

  <xs:complexType name="OutputType">
    <xs:sequence>
      <xs:element name="output0" type="OutputDefinition0" />
      <xs:element name="output1" type="OutputDefinition1" />
      <xs:element name="output2" type="OutputDefinition2" />
    </xs:sequence>
  </xs:complexType>

  <!-- Yudelson: obsolete
  <xs:simpleType name="structureType" final="restriction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="bySkill" />
    </xs:restriction>
  </xs:simpleType>-->

  <xs:simpleType name="solverType" final="restriction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Baum-Welch" />
      <xs:enumeration value="Gradient Descent" />
      <xs:enumeration value="Conjugate Gradient Descent, Polak-Ribiere" />
      <xs:enumeration value="Conjugate Gradient Descent, Fletcher-Reeves" />
      <xs:enumeration value="Conjugate Gradient Descent, Hestenes-Stiefel" />
      <xs:enumeration value="Conjugate Gradient Descent, Dai-Yuan" />
      <xs:enumeration value="Gradient Descent, Lagrangian stepping" />
    </xs:restriction>
  </xs:simpleType>

  <!-- Yudelson: obsolete
  <xs:simpleType name="conjugateGradientDescentType" final="restriction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Polak-Ribiere" />
      <xs:enumeration value="Fletcher-Reeves" />
      <xs:enumeration value="Hestenes-Stiefel" />
      <xs:enumeration value="Dai-Yuan" />
      <xs:enumeration value="None" />
    </xs:restriction>
  </xs:simpleType> -->


  <xs:simpleType name="probability">
	<xs:restriction base="xs:double">
		<xs:minInclusive value="0.0"/>
		<xs:maxInclusive value="1.0"/>
	</xs:restriction>
  </xs:simpleType>

  <xs:complexType name="OptionsType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="FileInputHeader" name="model" id="Model" default="\s*KC\s*\((.*)\)\s*" />
      <!-- <xs:element type="structureType" name="structure" id="Structure" default="bySkill" /> Yudelson obsolete -->
      <xs:element type="solverType" name="solver" id="Solver" default="Baum-Welch" />
      <!-- <xs:element type="conjugateGradientDescentType" name="conjugateGradientDescentOption" id="Conjugate_Gradient_Descent_Type"
        minOccurs="0"  default="None" /> Yudelson: obsolete-->
      <!-- <xs:element type="xs:integer" name="hiddenStates" id="Hidden_States" default="2" />  Yudelson: too advanced -->
      <xs:element type="xs:integer" name="maxIterations" id="Max_Iterations" default="200" />
      <!-- <xs:element type="xs:integer" name="xValidationPredictState" id="Cross-validation_Predict_State"
        default="1" /> Yudelson: too advanced -->
      <xs:element type="xs:integer" name="xValidationFolds" id="Cross-validation_Folds" default="10" />
<!--       <xs:element type="xs:string" name="initialParameters" id="Initial_Parameters" default="0.5,1.0,0.4,0.8,0.2" /> Yudelson, will be split -->
<!--      <xs:element type="xs:string" name="lowerBoundaries" id="Lower_Boundaries" default="0,0,1,0,0,0,0.7,0,0,0.7" />  Yudelson, will be split -->
<!--      <xs:element type="xs:string" name="upperBoundaries" id="Upper_Boundaries" default="1,1,1,0,1,1,1,0.3,0.3,1" />  Yudelson, will be split -->
      <!-- Yudelson, initial parameters separately -->
      <xs:element type="probability" name="pInit" id="P_Init" default="0.5"/>
      <xs:element type="probability" name="pForget" id="P_Forget" default="0.0" />
      <xs:element type="probability" name="pLearn" id="P_Learn" default="0.4" />
      <xs:element type="probability" name="pSlip" id="P_Slip" default="0.2" />
      <xs:element type="probability" name="pGuess" id="P_Guess" default="0.2" />
      <!-- Yudelson, upper lower separately -->
      <xs:element type="probability" name="pInitLowerBoundary" id="P_Init_Lower_Boundary" default="0.0" />
      <xs:element type="probability" name="pForgetLowerBoundary" id="P_Forget_Lower_Boundary" default="0.0" />
      <xs:element type="probability" name="pLearnLowerBoundary" id="P_Learn_Lower_Boundary" default="0.0" />
      <xs:element type="probability" name="pSlipLowerBoundary" id="P_Slip_Lower_Boundary" default="0.0" />
      <xs:element type="probability" name="pGuessLowerBoundary" id="P_Guess_Lower_Boundary" default="0.0" />
      <!-- Yudelson, upper boundaries separately -->
      <xs:element type="probability" name="pInitUpperBoundary" id="P_Init_Upper_Boundary" default="1.0" />
      <xs:element type="probability" name="pForgetUpperBoundary" id="P_Forget_Upper_Boundary" default="0.0" />
      <xs:element type="probability" name="pLearnUpperBoundary" id="P_Learn_Upper_Boundary" default="1.0" />
      <xs:element type="probability" name="pSlipUpperBoundary" id="P_Slip_Upper_Boundary" default="0.3" />
      <xs:element type="probability" name="pGuessUpperBoundary" id="P_Guess_Upper_Boundary" default="0.3" />
    </xs:choice>
  </xs:complexType>

  <xs:element name="component">
    <xs:complexType>
      <xs:all>
        <xs:element type="xs:integer" name="workflow_id" />
        <xs:element type="xs:string" name="component_id" />
        <xs:element type="xs:string" name="component_id_human" />
        <xs:element type="xs:string" name="component_name" />
        <xs:element type="xs:string" name="component_type" />
        <xs:element type="xs:double" name="left"  />
        <xs:element type="xs:double" name="top"  />
        <xs:element name="connections" minOccurs="0" maxOccurs="1"  type="ConnectionType" />

        <xs:element name="inputs" type="InputType" minOccurs="0"  />
        <xs:element name="inputLabels" type="InputLabel" minOccurs="0" />
        <xs:element name="outputs" type="OutputType" minOccurs="0"  />
        <xs:element name="options" type="OptionsType" minOccurs="0"  />

      </xs:all>
    </xs:complexType>
  </xs:element>

</xs:schema>